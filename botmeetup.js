require('dotenv').config();
const { Telegraf, session } = require('telegraf');
const mongoose = require('mongoose');

const keys = require('./app_modules/keyboards');// –º–æ–¥—É–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä
const text = require('./app_modules/commands');// –º–æ–¥—É–ª—å —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const datain = require('./app_modules/datain');// –º–æ–¥—É–ª—å –¥–∞–Ω–Ω—ã—Ö
const creatLogErr = require('./app_modules/logerror');// –º–æ–¥—É–ª—å –¥–∞–Ω–Ω—ã—Ö
const ratingBd = require('./app_modules/ratingBd');
const getWeatherStart = require('./weather/getweatherstart');
const getWeather = require('./weather/getweather');
const logsMessagesChannel = require('./app_modules/logsMessagesChannel');
const Message = require('./models/Message')
const Rating = require('./models/Rating');
const { stopCoverage } = require('v8');

const bot = new Telegraf(process.env.BOT_TOKEN);

// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
mongoose.connect(process.env.MONGODB)
	.then(() => {
		console.log('MongoDb connected..')
	})
	.catch((e) => {
		console.log(e)
	})

bot.use(session())
let members // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
bot.catch((err, ctx) => {
	console.log(`Ooops, encountered an error for ${ctx.updateType}`, err)
})
// –∫–æ–Ω—Ç—Ä–æ–ª—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è option_ids: [ 0 ] –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç
// –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∫–∏ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –∫–∞–Ω–∞–ª–µ –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º –≤ –≥—Ä—É–ø–ø–µ, –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫ —ç—Ç–∏–º —Å–æ–±—ã—Ç–∏—è–º
// bot.on('poll_answer', async ctx => {
// 	console.log(ctx)
// 	if (ctx.update.poll_answer.option_ids[0] === 0) {
// 		const forwardedMessageId = 87
// 		const pollObj = await Message.find()
// 		// console.log(pollObj[0].message.text)
// 		ctx.telegram.editMessageText(process.env.CHANNEL_TELEGRAM, forwardedMessageId, '–ø—Ä–∏–≤–µ—Ç!', pollObj[0].message.text + `\n` + '–£—á–∞—Å—Ç–≤—É—é—Ç: ' + pollObj[0].pollCount)
// 	}
// })

// –∫–Ω–æ–ø–∫–∞ start
bot.start(async (ctx) => {
	const userName = ctx.update.message.from.username;
	await ctx.reply(`–ü—Ä–∏–≤–µ—Ç ${userName ? userName : '–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü'} ! ${text.textStart}`, { parse_mode: 'html', disable_web_page_preview: true })
});
bot.help(async (ctx) => {
	await ctx.reply(text.commands, { parse_mode: 'html', disable_web_page_preview: true })
});
// RideOn
// –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –Ω–∞–¥–æ —Ñ—É–Ω–∫—Ü–∏—é –¥–µ–ª–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å –ø–æ–º–æ—â—å—é async/await
bot.command('rideon', async ctx => {
	try {
		if (ctx.update.message.from.username) {
			// –æ–±–Ω—É–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
			members = {}
			ctx.session = {}
			ctx.session.start = [
				[
					{ text: '–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞', callback_data: 'meetDate' },
					{ text: '–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –∑–∞–µ–∑–¥–∞', callback_data: 'meetTime' }
				],
				[
					{ text: '–ú–µ—Å—Ç–æ —Å–±–æ—Ä–∞', callback_data: 'meetLocation' },
					{ text: '–î–∏—Å—Ç–∞–Ω—Ü–∏—è, –∫–º', callback_data: 'meetDistance' }
				],
				[
					{ text: '–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å', callback_data: 'meetSpeed' },
					{ text: '–°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–µ–∑–¥–∞', callback_data: 'meetLevel' }
				],
				[
					{ text: '–°–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–µ–∑–¥—É', callback_data: 'meetSummary' }
				]
			]
			await ctx.deleteMessage(ctx.update.message.message_id).catch(e => creatLogErr(e));
			await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', { reply_markup: { inline_keyboard: ctx.session.start } }).catch(e => creatLogErr(e));
		}
		else {
			await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º –Ω–µ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
		}
	} catch (err) {
		console.error(err);
	};
});
bot.command('rating', async ctx => {
	let ratingTextI = `–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –∑–∞–µ–∑–¥–æ–≤:\n`
	const contextParse = await Rating.find().sort({ posts: -1 })
	for (let i = 0; i < contextParse.length; i++) {
		let ratingText = `${i + 1}. ${contextParse[i].username}-${contextParse[i].posts} üö¥ \n`
		ratingTextI = ratingTextI + ratingText
	}
	await ctx.reply(ratingTextI).catch((e) => console.log(e))

});
// —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã keymyPosts –º–∞—Å—Å–∏–≤–∞ —Å–æ –≤—Å–µ–º–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ—Ä–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
// —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∞–≤—Ç–æ—Ä–∞ keymyPosts
bot.command('delete', async ctx => {
	const regexp = RegExp('@' + ctx.update.message.from.username)
	const messageFromBd = await Message.find({ "message.text": regexp })
	// —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –≤—ã—Ä–µ–∑–∞—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∑–Ω–∞—á–µ–Ω–∏—è message.text
	let keymyPosts = [];
	for (let i = 0; i < messageFromBd.length; i++) {
		keymyPosts.push([{ text: messageFromBd[i].message.text.substring(33, 79).replace(/\n/g, '.'), callback_data: `ffmi${messageFromBd[i].message.forward_from_message_id}` }])
	};
	// –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ –º–∞—Å—Å–∏–≤–µ myPost –∏–ª–∏ –Ω–µ—Ç
	if ((typeof messageFromBd[0]) !== 'undefined') {
		await ctx.reply('–ö–∞–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª—è–µ–º?', { reply_markup: { inline_keyboard: keymyPosts } }).catch((e) => console.log(e))
	}
	else {
		await ctx.reply('–í–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç!').catch((e) => console.log(e))
	}
});
//===================================================================================================
// —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∫–∞–Ω–Ω–∞–ª–µ –≤ mongodb
bot.on('message', async (ctx) => {
	if (typeof ctx.update.message.forward_from_message_id !== 'undefined') {
		logsMessagesChannel(ctx.message)
	}

	if (ctx.update.message.from.id === 777000) {
		// –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –¥–∏—Å–∫—É—Å—Å–∏–π "–ø—Ä–∏–∫—Ä–µ–ø–ª—è—è" –µ–≥–æ –∫ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é reply_to_message_id
		await ctx.telegram.sendPoll(process.env.GROUP_TELEGRAM, '–ö—Ç–æ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–µ–∑–¥–µ?', ['–£—á–∞—Å—Ç–≤—É—é!', '–ù–µ —É—á–∞—Å—Ç–≤—É—é!', '–ò—â—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!'], { 'is_anonymous': false, 'correct_option_id': 0, 'reply_to_message_id': ctx.update.message.message_id }).catch((e) => console.log(e))
		// –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –≤ –¥–∏—Å–∫—É—Å—Å–∏—é –æ –∑–∞–µ–∑–¥–µ
		await ctx.telegram.sendMessage(process.env.GROUP_TELEGRAM, getWeatherStart(members.dateM, members.locationsM) ?? '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö', { 'is_anonymous': false, 'correct_option_id': 0, 'reply_to_message_id': ctx.update.message.message_id, parse_mode: 'html' }).catch((e) => console.log(e))
	}
})
//===================================================================================================
// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –Ω–∞–∂–∞—Ç–∏–π –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (ctx) => {
	const userName = ctx.update.callback_query.from.username;
	ctx.session.start ??= [
		[
			{ text: '–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞', callback_data: 'meetDate' },
			{ text: '–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –∑–∞–µ–∑–¥–∞', callback_data: 'meetTime' }
		],
		[
			{ text: '–ú–µ—Å—Ç–æ —Å–±–æ—Ä–∞', callback_data: 'meetLocation' },
			{ text: '–î–∏—Å—Ç–∞–Ω—Ü–∏—è, –∫–º', callback_data: 'meetDistance' }
		],
		[
			{ text: '–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å', callback_data: 'meetSpeed' },
			{ text: '–°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–µ–∑–¥–∞', callback_data: 'meetLevel' }
		],
		[
			{ text: '–°–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–µ–∑–¥—É', callback_data: 'meetSummary' }
		]
	];
	ctx.session.creatM = '@' + userName;
	//–∏—Ç–æ–≥–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –∑–∞–µ–∑–¥–µ
	const meetStr = `<b>–î–∞–Ω–Ω—ã–µ –æ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–º –≤–µ–ª–æ–∑–∞–µ–∑–¥–µ</b>:\n<b>–î–∞—Ç–∞</b>: ${ctx.session.dateM ?? '---'}\n<b>–í—Ä–µ–º—è</b>: ${ctx.session.timeM ?? '---'}\n<b>–ú–µ—Å—Ç–æ</b>: ${ctx.session.locationsM ?? '---'}\n<b>–î–∏—Å—Ç–∞–Ω—Ü–∏—è</b>: ${ctx.session.distanceM ?? '---'} \n<b>T–µ–º–ø</b>: ${ctx.session.speedM ?? '---'}\n<b>–°–ª–æ–∂–Ω–æ—Å—Ç—å</b>: ${ctx.session.levelM ?? '---'}\n<b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∑–∞–µ–∑–¥–∞</b>: ${ctx.session.creatM}`;

	const cbData = ctx.update.callback_query.data; // callback_data
	await ctx.deleteMessage(ctx.update.callback_query.message.message_id).catch(e => creatLogErr(e)); // —É–¥–∞–ª–µ–Ω–∏–µ –º–µ–Ω—é –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –ª—é–±–æ–π –∫–Ω–æ–ø–∫–∏
	// ctx.answerCbQuery(); // —É–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É —á–∞—Å–æ–≤ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, –ø–æ –≤—ã–≤–æ–¥–∏—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ —ç—Ä–∞–Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º
	function handleQuery(callbackData, textTitle, keyboard) {
		if (cbData === callbackData) {
			ctx.reply(textTitle, { reply_markup: { inline_keyboard: keyboard } });
		};
	}
	// –≤—ã–≤–æ–¥ –º–µ–Ω—é —Å –¥–∞—Ç–∞–º–∏ –≤—ã–±–∏—Ä–∞–µ–º 
	handleQuery('meetDate', '–î–∞—Ç–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–µ–∑–¥–∞', keys.creatDayKey());
	// –≤—ã–≤–æ–¥ –º–µ–Ω—é –≤—Ä–µ–º—è
	handleQuery('meetTime', '–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞', keys.times);
	// –≤—ã–≤–æ–¥ –º–µ–Ω—é –º–µ—Å—Ç–∞
	handleQuery('meetLocation', '–ú–µ—Å—Ç–æ —Å–±–æ—Ä–∞(—Å—Ç–∞—Ä—Ç–∞) –∑–∞–µ–∑–¥–∞', keys.location);
	// –≤—ã–≤–æ–¥ –º–µ–Ω—é –¥–∏—Å—Ç–∞–Ω—Ü–∏–π
	handleQuery('meetDistance', '–î–∏—Å—Ç–∞–Ω—Ü–∏—è –∑–∞–µ–∑–¥–∞, –∫–º', keys.distance);
	// –≤—ã–≤–æ–¥ –º–µ–Ω—é —Å–∫–æ—Ä–æ—Å—Ç–∏
	handleQuery('meetSpeed', '–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–µ–∑–¥–∞, –∫–º/—á', keys.speed);
	// –≤—ã–≤–æ–¥ –º–µ–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
	handleQuery('meetLevel', '–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–µ–∑–¥–∞', keys.level);
	// –≤—ã–≤–æ–¥ –º–µ–Ω—é —Å–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–µ–∑–¥—É, –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
	if (cbData === 'meetSummary') {
		await ctx.replyWithHTML(meetStr, { reply_markup: { inline_keyboard: keys.summary } }).catch((e) => console.log(e))
	};
	//===================================================================================================
	// –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–π
	if (cbData === 'meetSend') {
		// –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
		if (meetStr.includes('---')) {
			await ctx.reply('–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!!!', { reply_markup: { inline_keyboard: keys.filled } }).catch((e) => console.log(e));
		} else {
			members = ctx.session
			await ctx.telegram.sendMessage(process.env.CHANNEL_TELEGRAM, meetStr, { parse_mode: 'html', disable_web_page_preview: true }).catch((e) => console.log(e));
			// –ø–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
			ratingBd(userName);
			// —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–µ
			await ctx.reply(text.textPost).catch((e) => console.log(e));
			//–æ–±–Ω—É–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
			// ctx.session = {};
		}
	};
	// —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
	if (cbData === 'meetEdit') {
		output()
	};
	//===================================================================================================
	async function output() {
		await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', { reply_markup: { inline_keyboard: ctx.session.start } }).catch((e) => console.log(e))
	}
	// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –ø–æ–¥–º–µ–Ω—é
	if (datain.creatDayArr().includes(cbData)) {
		try {
			ctx.session.dateM = cbData;
			ctx.session.start[0][0].text = '–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ ‚úîÔ∏è';
		} catch (err) {
			console.error(err);
		};
		output();
	};
	if (datain.timesArr.includes(cbData)) {
		ctx.session.timeM = cbData;
		ctx.session.start[0][1].text = '–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –∑–∞–µ–∑–¥–∞ ‚úîÔ∏è';
		output();
	};
	if (datain.locations.includes(cbData)) {
		ctx.session.locationsM = cbData;
		ctx.session.start[1][0].text = '–ú–µ—Å—Ç–æ —Å–±–æ—Ä–∞ ‚úîÔ∏è';
		output();
	};
	if (datain.distanceArr.includes(cbData)) {
		ctx.session.distanceM = cbData;
		ctx.session.start[1][1].text = '–î–∏—Å—Ç–∞–Ω—Ü–∏—è, –∫–º ‚úîÔ∏è';;
		output();
	};
	if (datain.speedArr.includes(cbData)) {
		ctx.session.speedM = cbData;
		ctx.session.start[2][0].text = '–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å ‚úîÔ∏è';
		output();
	};
	if (datain.levelArr.includes(cbData)) {
		ctx.session.levelM = cbData;
		ctx.session.start[2][1].text = '–°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–µ–∑–¥–∞ ‚úîÔ∏è';
		output();
	};
	// –±–ª–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–æ–º –Ω–µ–Ω—É–∂–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∫–∞–Ω–∞–ª–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
	if (cbData.includes('ffmi')) {
		const forwardMess = cbData.replace(/ffmi/g, ''); //—á–∏—Å—Ç–∏–º callback_data –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ ffmi
		await ctx.telegram.editMessageText(process.env.CHANNEL_TELEGRAM, forwardMess, '–ø—Ä–∏–≤–µ—Ç!', '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ! –£–¥–∞–ª–µ–Ω–æ –∞–≤—Ç–æ—Ä–æ–º –ø–æ—Å—Ç–∞.').catch((e) => creatLogErr(e))
		//–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∂–¥–µ—Ç forwardMess –≤ —Ñ–æ—Ä–º–∞—Ç–µ Number
		await Message.deleteOne({ "message.forward_from_message_id": +forwardMess }).catch((e) => console.log(e))
		await ctx.reply('–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!').catch((e) => console.log(e));
	};
});

bot.launch();
//–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
setInterval(() => {
	getWeather()
}, 86400000);


// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));